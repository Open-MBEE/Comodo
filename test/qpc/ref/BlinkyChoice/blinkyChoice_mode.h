/* 
 * This code was generated by Comodo (https://github.com/Open-MBEE/Comodo) 
 * using the QPC-C Target Platform
 *
 * - Generated Class (Comodo Module):
 *      blinkyChoice
 *
 * - Generated State Machine (Comodo Component):
 *      mode
 * 
 *
 * ############### Requirements ###############
 *  Implements: 
 * - https://<traceability-service-hostname>/724776 
 * - https://<traceability-service-hostname>/724777 
 *
 * ############################################
 *
 */


 

#ifndef BLINKYCHOICE_MODE_H_
#define BLINKYCHOICE_MODE_H_

#include <stdbool.h>
#include <qf_port.h>
#include <qassert.h>
#include <blinkyChoice_statechart_signals.h>
#include <blinkyChoice_mode_states.h>
#include <blinkyChoice_mode_impl.h>


/**
 * Declare the state machine struct, encapsulating the extended state variables.
 * It tracks any timers, owned orthogonal regions, history states, substates.
 */
typedef struct blinkyChoice_mode {
    QActive super;  // C-style inheritance
    QActive *active;  // containing machine if this is a submachine instance
    char objName[128];
    blinkyChoice_mode_impl *impl;
    enum blinkyChoice_mode_state myState;

    /* Completion event for exiting from composite/orthogonal/submachine state */
    QCompletionEvt BLINKYCHOICE_MODE_COMPLETION_EVENT_;

    /* Bail event to terminate orthogonal/submachine substate */
    QEvt BLINKYCHOICE_MODE_BAIL_EVENT_;

} blinkyChoice_mode;


/** 
 * blinkyChoice_mode Constructor
 *
 * This State machine constructor is responsible for initializing
 * the object, allocating and initializing any orthogonal regions, 
 * and initializing the timers.
 */
blinkyChoice_mode *blinkyChoice_mode_constructor (blinkyChoice_mode *me, const char *objNameNew, blinkyChoice_mode_impl *implObj, QActive *active);

/**
  * Returns the instance of the Implementation class for this QActive.
  */
blinkyChoice_mode_impl *blinkyChoice_mode_get_impl (blinkyChoice_mode *me);

/**
 * Returns the unique enum representing the current state of this machine.
 */
blinkyChoice_mode_state blinkyChoice_mode_get_current_state (blinkyChoice_mode *me);

/**
 * Method to initialize state machine (equivalent to initial pseudostate)
 */
QState blinkyChoice_mode_initial (blinkyChoice_mode *me, QEvt const *e);

/**
 * State methods
 */
QState blinkyChoice_mode_on(blinkyChoice_mode *me, QEvt const *e); 
QState blinkyChoice_mode_off(blinkyChoice_mode *me, QEvt const *e); 
QState blinkyChoice_mode_finalState0(blinkyChoice_mode *me, QEvt const *e); 
QState blinkyChoice_mode_unnamedState0(blinkyChoice_mode *me, QEvt const *e); 




#endif /* BLINKYCHOICE_MODE_H_ */
