/** 
 * COMODO - Multiplatform Component Code Generator 
 *    (c) European Southern Observatory, 2011 
 *    Copyright by ESO 
 *    All rights reserved 
 * 
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * $Id: StateMachineConstraints.chk 376 2011-08-11 21:13:46Z nbenes $
 * 
 */

import uml;

context StateMachine ERROR "StateMachine must have a name" :
	name.length != 0;

context StateMachine ERROR "StateMachine must have an initial state." :
	allOwnedElements().typeSelect(Pseudostate).select(e|(e.kind.toString() == "initial")&& (e.container.owner == this)).size > 0;
	
context StateMachine WARNING "StateMachine must have inner states" :
	allOwnedElements().typeSelect(State).size > 0;
 
context State ERROR "State must have a name" :
	name.length != 0;

context State if this.metaType.name == "uml::FinalState" WARNING "Final states must have a name" :
	name.length != 0;
		
context State if isOrthogonal() ERROR "Orthogonal Regions must have a name" :
	allOwnedElements().typeSelect(Region).select(e|(e.owner == this)&&(e.name.length == 0)).size == 0;

context State if isOrthogonal() WARNING "Initial state is missing in orthogonal region" :
	this.allOwnedElements().typeSelect(Pseudostate).select(e|e.kind.toString() == "initial").select(e|this.ownedElement.contains(e.container)).size == this.ownedElement.typeSelect(Region).size ;

//context State if isComposite()WARNING "Composite State without substates" :
//	allOwnedElements().typeSelect(Pseudostate).select(e|(e.kind.toString() == "initial")&&(e.container.owner == this )).size > 0;
	
context State if ( isComposite() && !allOwnedElements().typeSelect(State).select(e|!(e.name == "Unavailable") && !(e.metaType.name == "uml::FinalState") ).isEmpty ) ERROR "Composite States must have a default initial state" :
	allOwnedElements().typeSelect(Pseudostate).select(e|(e.kind.toString() == "initial")&&(e.container.owner == this )).size > 0;
	
context State ERROR "Name of states must be unique":
	!this.allOwnedElements().typeSelect(State).name.contains(this.name);
	
context State if isOrthogonal() WARNING "Transitions from orthogonal states are ignored":
	this.outgoing.size == 0;
	
context Pseudostate if kind.toString().contains("History") ERROR "History state must have a name":
	this.name.length !=0;
	
context Pseudostate if kind.toString().contains("History") ERROR "History state must have a default state":	
	this.outgoing.toList().size !=0;

context Pseudostate if kind.toString().contains("initial") ERROR "Every initial state must have an outgoing transition":
	!this.outgoing.isEmpty;	
