«REM»
/** 
 * COMODO - Multiplatform Component Code Generator 
 *    (c) European Southern Observatory, 2011 
 *    Copyright by ESO 
 *    All rights reserved 
 * 
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * $Id: $
 *
 */
«ENDREM»
 
«IMPORT uml»

«EXTENSION comodo::xtend::cmdo::scxmlutil»
«EXTENSION comodo::xtend::uml::statemachine»
«EXTENSION comodo::xtend::cmdo::package»
«EXTENSION comodo::xtend::cmdo::artifact»
«EXTENSION comodo::xtend::uml::artifact»
«EXTENSION comodo::xtend::cmdo::helpers»

«DEFINE Root FOR uml::Model -»
«FOREACH getModulePackage().getPimComponentImpls() AS eElement -»
«EXPAND SM FOREACH eElement.getStateMachines()-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE SM FOR uml::StateMachine -»
«FOREACH this.getAllActivityName().removeDuplicates() AS activityName -»
«LET fileExists(getOutputDirectory()+'/'+this.getModel().getModulePackage().name+'/src/'+this.getModel().getModulePackage().name+'ACTIVITY_'+activityName+'.C') AS alreadyThere -»
«IF generateModeAll() || (alreadyThere == false && generateModeUpdate())»

«FILE this.getModel().getModulePackage().name+'/src/'+this.getModel().getModulePackage().name+'ACTIVITY_'+activityName+'.C'-»
«EXPAND comodo::templates::vlt::txt::Copyright::Source FOR "" -»

#define _POSIX_SOURCE 1
#include "vltPort.h"

#include "«this.getModel().getModulePackage().name».h"
«this.getModel().getModulePackage().name»WSF_RCSID("@(#) $Id: «this.getModel().getModulePackage().name»ACTIVITY_«activityName».C 593 2012-04-22 12:12:12Z landolfa $")

#include "«this.getModel().getModulePackage().name»ACTIVITY_«activityName».h"
#include "«this.getModel().getModulePackage().name»CONFIG.h"
#include "«this.getModel().getModulePackage().name»DATA.h"

#include "wsf2libCONTROL.h"
#include "wsf2libLOG.h"
#include "wsf2libFSM.h"

#include "evhTHREADS.h"

#include <unistd.h>


/** 
 * Constructor
 */
«this.getModel().getModulePackage().name»ACTIVITY_«activityName»::«this.getModel().getModulePackage().name»ACTIVITY_«activityName»(const std::string& procName, 
	wsf2libFSM* fsm, 
	evhTHREADS& threadsHandler, 
	wsf2libCONTROL& control,
	«this.getModel().getModulePackage().name»CONFIG& config,
	«this.getModel().getModulePackage().name»DATA& data) :
    wsf2libSCXML_ACTIVITY("«activityName»", procName, threadsHandler),
    mFsm(fsm),
    mControl(control),
    mConfig(config),
    mData(data)
{
    wsf2libLOG_TRACE();
}


/** 
 * Destructor
 */
«this.getModel().getModulePackage().name»ACTIVITY_«activityName»::~«this.getModel().getModulePackage().name»ACTIVITY_«activityName»()
{
    wsf2libLOG_TRACE();
}


/**
 * run
 */
void «this.getModel().getModulePackage().name»ACTIVITY_«activityName»::run()
{
    /*
     * Here goes your thread code!
     */
     /*
     while (isRunning())
     	{
     	wsf2libLOG(LOG_INFO) << "Thread «activityName»!";
     	sleep(2);
     	}
     */
}

// __oOo__


«ENDFILE»
«ENDIF»
«ENDLET»
«ENDFOREACH-»
«ENDDEFINE»

