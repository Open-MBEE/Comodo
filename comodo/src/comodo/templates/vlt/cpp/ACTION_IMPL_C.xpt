«REM»
/** 
 * COMODO - Multiplatform Component Code Generator 
 *    (c) European Southern Observatory, 2011 
 *    Copyright by ESO 
 *    All rights reserved 
 * 
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * $Id: $
 *
 */
«ENDREM»
 
«IMPORT uml»

«EXTENSION comodo::xtend::cmdo::scxmlutil»
«EXTENSION comodo::xtend::cmdo::package»
«EXTENSION comodo::xtend::cmdo::artifact»
«EXTENSION comodo::xtend::uml::artifact»
«EXTENSION comodo::xtend::cmdo::helpers»

«DEFINE Root FOR uml::Model -»
«FOREACH getModulePackage().getPimComponentImpls() AS eElement -»
«EXPAND SM FOREACH eElement.getStateMachines()-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE SM FOR uml::StateMachine -»
«FOREACH this.getAllActionNamePrefix().removeDuplicates() AS actionName -»
«LET fileExists(getOutputDirectory()+'/'+this.getModel().getModulePackage().name+'/src/'+this.getModel().getModulePackage().name+'ACTION_'+actionName+'.C') AS alreadyThere -»
«IF ((generateModeAll() == true) || ((alreadyThere == false) && (generateModeUpdate() == true)))»

«FILE this.getModel().getModulePackage().name+'/src/'+this.getModel().getModulePackage().name+'ACTION_'+actionName+'.C'-»
«EXPAND comodo::templates::vlt::txt::Copyright::Source FOR "" -»

#define _POSIX_SOURCE 1
#include "vltPort.h"

#include "«this.getModel().getModulePackage().name».h"
«this.getModel().getModulePackage().name»WSF_RCSID("@(#) $Id: «this.getModel().getModulePackage().name»ACTION_«actionName».C 593 2012-04-22 12:12:12Z landolfa $")

«IF actionName.isVltStandardAction()-»
	«EXPAND ActionStandard FOR actionName-»
«ELSE-»
	«EXPAND ActionCustom FOR actionName-»
«ENDIF»	

// __oOo__

«ENDFILE»
«ENDIF»
«ENDLET»
«ENDFOREACH-»
«ENDDEFINE»


«DEFINE ActionStandard FOR String -»
#include "«getPackageVar()»ACTION_«this».h"
#include "«getPackageVar()»ACTION_MGR.h"
#include "«getPackageVar()»CONFIG.h"
#include "«getPackageVar()»DATA.h"
#include "«getPackageVar()»Actions.h"
«IF this.matches("VERSION")-»   
#include "«getPackageVar()»Errors.h"
«ENDIF-»

#include "wsf2libCONTROL.h"
#include "wsf2libLOG.h"
«IF this.matches("VERSION")-»
#include "wsf2libASSERT.h"   
#include "wsf2libCMDH_IN.h"
«ENDIF-»

/** 
 * Constructor
 * 
 * @param fsm pointer to the state machine.
 * @param dbRoot database root of the debug flag.
 */
«getPackageVar()»ACTION_«this»::«getPackageVar()»ACTION_«this»(«getPackageVar()»ACTION_MGR& actionMgr,
				       wsf2libCONTROL& control,
				       «getPackageVar()»CONFIG& config,
				       «getPackageVar()»DATA& data) :
    wsf2libACTION_«this»(«getPackageVar()»ACTION_STR_«this», actionMgr, control),
    mActionMgr(actionMgr), 
    mControl(control), 
    mConfig(config), 
    mData(data)
{
    wsf2libLOG_TRACE();
}


/** 
 * Destructor
 */
«getPackageVar()»ACTION_«this»::~«getPackageVar()»ACTION_«this»()
{
    wsf2libLOG_TRACE();
}

«IF this.matches("VERSION")-»   
/**
 * Execute
 */
ccsCOMPL_STAT «getPackageVar()»ACTION_«this»::Execute()
{
    wsf2libLOG_TRACE();
    wsf2libLOG_ACTION(GetName());    
    wsf2libASSERTPTR(mCmdVersion);    
    ErrReset();

    // get version and build the reply buffer
    char buf[512];
    snprintf(buf, sizeof(buf), "%s %s", «getPackageVar()»MOD, rcsId);

    if (mCmdVersion->SendNormalReply(buf) == FAILURE)
	{
	ErrAdd(«getPackageVar()»MOD, «getPackageVar()»ERR_ACTION, __FILE_LINE__, GetName(), __FUNCTION__,
	       mActionMgr.GetStateDesc());
	return FAILURE;
	}

    return SUCCESS;
}
«ENDIF-»
«ENDDEFINE»


«DEFINE ActionCustom FOR String -»
#include "«getPackageVar()»ACTION_«this».h"
#include "«getPackageVar()»ACTION_MGR.h"
#include "«getPackageVar()»CONFIG.h"
#include "«getPackageVar()»DATA.h"
#include "«getPackageVar()»Actions.h"
#include "«getPackageVar()»Errors.h"

#include "wsf2libCONTROL.h"
#include "wsf2libLOG.h"
#include "wsf2libASSERT.h"


/** 
 * Constructor
 * 
 * @param fsm pointer to the state machine.
 * @param dbRoot database root of the debug flag.
 */
«getPackageVar()»ACTION_«this»::«getPackageVar()»ACTION_«this»(«getPackageVar()»ACTION_MGR& actionMgr,
				       wsf2libCONTROL& control,
				       «getPackageVar()»CONFIG& config,
				       «getPackageVar()»DATA& data) :
    wsf2libACTION(«getPackageVar()»ACTION_STR_«this»),
    mActionMgr(actionMgr), 
    mControl(control), 
    mConfig(config), 
    mData(data)
{
    wsf2libLOG_TRACE();
}


/** 
 * Destructor
 */
«getPackageVar()»ACTION_«this»::~«getPackageVar()»ACTION_«this»()
{
    wsf2libLOG_TRACE();
}


/**
 * Init
 */
ccsCOMPL_STAT «getPackageVar()»ACTION_«this»::Init()
{
    wsf2libLOG_TRACE();
    wsf2libLOG_ACTION(GetName());
    ErrReset();

    return SUCCESS;
}

/**
 * Execute
 */
ccsCOMPL_STAT «getPackageVar()»ACTION_«this»::Execute()
{
    wsf2libLOG_TRACE();
    wsf2libLOG_ACTION(GetName());
    ErrReset();

    return SUCCESS;
}

/**
 * Complete. 
 */
ccsCOMPL_STAT «getPackageVar()»ACTION_«this»::Complete()
{
    wsf2libLOG_TRACE();
    wsf2libLOG_ACTION(GetName());
    ErrReset();

    return SUCCESS;
}

/**
 * Abort. 
 */
ccsCOMPL_STAT «getPackageVar()»ACTION_«this»::Abort()
{
    wsf2libLOG_TRACE();
    wsf2libLOG_ACTION(GetName());
    ErrReset();

    return SUCCESS;
}

/**
 * Reject 
 */
ccsCOMPL_STAT «getPackageVar()»ACTION_«this»::Reject()
{
    wsf2libLOG_TRACE();
    wsf2libLOG_ACTION(GetName());
    ErrReset();

    return SUCCESS;
}

/**
 * Supersede 
 */
ccsCOMPL_STAT «getPackageVar()»ACTION_«this»::Supersede()
{
    wsf2libLOG_TRACE();
    wsf2libLOG_ACTION(GetName());
    ErrReset();

    return SUCCESS;
}
«ENDDEFINE»



