package comodo2.templates.elt.cpp;

import com.google.common.collect.Iterables;
import comodo2.engine.Config;
import comodo2.queries.QClass;
import comodo2.utils.FilesHelper;
import javax.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

@SuppressWarnings("all")
public class RadActionsStd implements IGenerator {
  @Inject
  @Extension
  private QClass _qClass;
  
  @Inject
  @Extension
  private FilesHelper _filesHelper;
  
  /**
   * Transform UML State Machine associated to a class (classifier behavior)
   * into a RAD ActionMgr class.
   */
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess fsa) {
    Iterable<org.eclipse.uml2.uml.Class> _filter = Iterables.<org.eclipse.uml2.uml.Class>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), org.eclipse.uml2.uml.Class.class);
    for (final org.eclipse.uml2.uml.Class e : _filter) {
      boolean _isToBeGenerated = this._qClass.isToBeGenerated(e);
      if (_isToBeGenerated) {
        this._filesHelper.makeBackup(this._filesHelper.toAbsolutePath(this._filesHelper.toHppFilePath("actionsStd")));
        fsa.generateFile(this._filesHelper.toHppFilePath("actionsStd"), this.generateHeader(Config.getInstance().getCurrentModule(), "ActionsStd"));
        this._filesHelper.makeBackup(this._filesHelper.toAbsolutePath(this._filesHelper.toCppFilePath("actionsStd")));
        fsa.generateFile(this._filesHelper.toCppFilePath("actionsStd"), this.generateSource(Config.getInstance().getCurrentModule(), "ActionsStd"));
      }
    }
  }
  
  /**
   * actionsStd.hpp
   */
  public CharSequence generateHeader(final String moduleName, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @ingroup ");
    _builder.append(moduleName, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @copyright ESO - European Southern Observatory");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @brief ");
    _builder.append(className, " ");
    _builder.append(" header file.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("#ifndef ");
    String _upperCase = moduleName.toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_");
    String _upperCase_1 = className.toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_2 = moduleName.toUpperCase();
    _builder.append(_upperCase_2);
    _builder.append("_");
    String _upperCase_3 = className.toUpperCase();
    _builder.append(_upperCase_3);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <rad/actionGroup.hpp>");
    _builder.newLine();
    _builder.append("#include <rad/signal.hpp>");
    _builder.newLine();
    _builder.append("#include <rad/smAdapter.hpp>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <string>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace ");
    String _lowerCase = moduleName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class DataContext;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class contains the implementation of the actions dealing with");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* the following \"standard\" commands:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - Exit");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - GetState");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - Reset");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - Stop");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - Init");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - Enable");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - Disable");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* and the following signals:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - SIGINT");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - SIGTERM");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* In addition it implements the:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - scxml4cpp::StatusListener interface to receive the notification of change of state from the State Machine engine.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* - rad::EventRejectListener interface to receive the notification of rejected event from the State Machine adapter.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ActionsStd : public rad::ActionGroup {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] ios Reference to the event loop.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] sm Reference to the SM Adapter used to inject internal events.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] data Data shared within the application among actions and activities.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ActionsStd(boost::asio::io_service& ios,");
    _builder.newLine();
    _builder.append("    \t\t   ");
    _builder.append("rad::SMAdapter& sm,");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("DataContext& data);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the scxml4cpp::StatusListener interface");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* to receive the change of state notification.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] status Current State Machine active states configuration.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void notifyStatus(std::set<scxml4cpp::State*>& status);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the GetState action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the GetState request with the");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* current State Machine active state configuration.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void GetState(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the Stop action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the ReqStop request.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void Stop(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the Init action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - re-initialize the application run-time data,");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the ReqInit request.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void Init(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the Enable action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the ReqEnable request.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void Enable(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the Disable action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the ReqDisable request.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void Disable(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the Reset action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the ReqReset request.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void Reset(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the SetLogLevel action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - changes the log level,");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the ReqSetLogLevel request.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void SetLogLevel(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the Exit action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - replies back for the originator of the ReqExit request.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - stops the event loop.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void Exit(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Implementation of the ExitNoReply action. This action:");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - stops the event loop.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] c Context containing the last event received by the State Machine.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void ExitNoReply(scxml4cpp::Context* c);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ActionsStd(const ActionsStd&) = delete;         //! Disable copy constructor");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ActionsStd& operator=(const ActionsStd&) = delete;  //! Disable assignment operator");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("private:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("boost::asio::io_service& m_io_service;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rad::SMAdapter&          m_sm;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rad::Signal              m_signal;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("DataContext&             m_data;");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}  // namespace ");
    String _lowerCase_1 = moduleName.toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#endif  // ");
    String _upperCase_4 = moduleName.toUpperCase();
    _builder.append(_upperCase_4);
    _builder.append("_");
    String _upperCase_5 = className.toUpperCase();
    _builder.append(_upperCase_5);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * actionsStd.cpp
   */
  public CharSequence generateSource(final String moduleName, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @ingroup ");
    _builder.append(moduleName, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @copyright ESO - European Southern Observatory");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @brief ");
    _builder.append(className, " ");
    _builder.append(" source file.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/actionsStd.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/dataContext.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/logger.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <events.rad.hpp>");
    _builder.newLine();
    _builder.append("#include <stdCmds.rad.hpp>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <rad/exceptions.hpp>");
    _builder.newLine();
    _builder.append("#include <rad/getPayload.hpp>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace ");
    String _lowerCase = moduleName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("ActionsStd::ActionsStd(boost::asio::io_service& ios,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t   ");
    _builder.append("rad::SMAdapter& sm,");
    _builder.newLine();
    _builder.append("                       ");
    _builder.append("DataContext& data)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(": rad::ActionGroup(\"ActionsStd\"),");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("m_io_service(ios),");
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append("m_sm(sm),");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("m_signal(ios, sm,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("rad::UniqueEvent(new Events::CtrlC())),");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("m_data(data) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_signal.Add(SIGINT);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_signal.Add(SIGTERM);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_signal.Install();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::Exit(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::Exit > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Exit event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("req->SetReplyValue(\"OK\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_io_service.stop();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::ExitNoReply(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_io_service.stop();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::GetState(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::GetState > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Status event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("req->SetReplyValue(m_sm.GetStatus());");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::Stop(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::Stop > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Stop event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("req->SetReplyValue(\"OK\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::Init(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::Init > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Init event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("req->SetReplyValue(\"OK\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::Enable(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::Enable > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Enable event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("req->SetReplyValue(\"OK\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::Disable(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::Disable > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Disable event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("req->SetReplyValue(\"OK\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::Reset(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::Reset > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Reset event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("req->SetReplyValue(\"OK\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ActionsStd::SetLogLevel(scxml4cpp::Context* c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req = rad::GetLastEventPayloadNothrow< StdCmds::SetLogLevel > (c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (req == nullptr) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"SetLogLevel event has no associated request!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("auto req_params = req->GetRequestPayload();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string level = req_params->getLevel();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string logger_name = req_params->getLogger();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("log4cplus::LogLevelManager& log_mgr = log4cplus::getLogLevelManager();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//LOG4CPLUS_DEBUG(GetLogger(), \"Log level\" << level);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("log4cplus::LogLevel ll = log_mgr.fromString(level);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (ll == log4cplus::NOT_SET_LOG_LEVEL) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("req->SetReplyValue(\"ERR unknown logging level: \" + level);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (logger_name == \"\" || logger_name == LOGGER_NAME) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetLogger().setLogLevel(ll);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("log4cplus::Logger::getInstance(logger_name).setLogLevel(ll);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Log level set to \" << level << \" for logger \" << logger_name);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("req->SetReplyValue(\"OK\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}  // namespace ");
    String _lowerCase_1 = moduleName.toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
