package comodo2.templates.elt.cpp;

import com.google.common.collect.Iterables;
import comodo2.engine.Config;
import comodo2.queries.QClass;
import comodo2.utils.FilesHelper;
import javax.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

@SuppressWarnings("all")
public class RadDbInterface implements IGenerator {
  @Inject
  @Extension
  private QClass _qClass;
  
  @Inject
  @Extension
  private FilesHelper _filesHelper;
  
  /**
   * Transform UML State Machine associated to a class (classifier behavior)
   * into a RAD ActionMgr class.
   */
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess fsa) {
    Iterable<org.eclipse.uml2.uml.Class> _filter = Iterables.<org.eclipse.uml2.uml.Class>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), org.eclipse.uml2.uml.Class.class);
    for (final org.eclipse.uml2.uml.Class e : _filter) {
      boolean _isToBeGenerated = this._qClass.isToBeGenerated(e);
      if (_isToBeGenerated) {
        this._filesHelper.makeBackup(this._filesHelper.toAbsolutePath(this._filesHelper.toHppFilePath("dbInterface")));
        fsa.generateFile(this._filesHelper.toHppFilePath("dbInterface"), this.generateHeader(Config.getInstance().getCurrentModule(), "DbInterface"));
        this._filesHelper.makeBackup(this._filesHelper.toAbsolutePath(this._filesHelper.toCppFilePath("dbInterface")));
        fsa.generateFile(this._filesHelper.toCppFilePath("dbInterface"), this.generateSource(Config.getInstance().getCurrentModule(), "DbInterface"));
      }
    }
  }
  
  /**
   * dbInterface.hpp
   */
  public CharSequence generateHeader(final String moduleName, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @ingroup ");
    _builder.append(moduleName, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @copyright ESO - European Southern Observatory");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @brief ");
    _builder.append(className, " ");
    _builder.append(" header file.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("#ifndef ");
    String _upperCase = moduleName.toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_");
    String _upperCase_1 = className.toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_2 = moduleName.toUpperCase();
    _builder.append(_upperCase_2);
    _builder.append("_");
    String _upperCase_3 = className.toUpperCase();
    _builder.append(_upperCase_3);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <rad/dbAdapter.hpp>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <string>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace ");
    String _lowerCase = moduleName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("const std::string KEY_CONTROL_STATE = \"ctr.state\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string KEY_CONFIG_REQ_ENDPOINT = \"cfg.req.endpoint\";");
    _builder.newLine();
    _builder.append("const std::string KEY_CONFIG_DB_ENDPOINT = \"cfg.db.endpoint\";");
    _builder.newLine();
    _builder.append("const std::string KEY_CONFIG_DB_TIMEOUT_SEC = \"cfg.db.timeout.sec\";");
    _builder.newLine();
    _builder.append("const std::string KEY_CONFIG_SM_SCXML = \"cfg.sm.scxml\";");
    _builder.newLine();
    _builder.append("const std::string KEY_CONFIG_FILENAME = \"cfg.filename\";");
    _builder.newLine();
    _builder.append("const std::string KEY_CONFIG_LOG_LEVEL = \"cfg.log.level\";");
    _builder.newLine();
    _builder.append("const std::string KEY_CONFIG_LOG_PROPERTIES = \"cfg.log.properties\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Config;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class is the interface to the in-memory DB.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class DbInterface {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] prefix String used as prefix when building the keys.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] runtime_db Reference to the in-memory DB adapter.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("DbInterface(const std::string& prefix, rad::DbAdapter& runtime_db);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Destructor");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("virtual ~DbInterface();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The current state of the application stored in the DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string GetControlState();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] key Key in the DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The value stored in the DB associated to the given key.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string Get(const std::string& key);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] value State to be stored in the DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void SetControlState(const std::string& value);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Set the application configuration information in the DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] cfg Application configuration.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void SetConfig(Config& cfg);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] key Key to be written in the DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] value Value, associated to the given key, to be written in the DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void Set(const std::string& key, const std::string& value);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("DbInterface(const DbInterface&) = delete;       //! Disable copy constructor");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("DbInterface& operator=(const DbInterface&) = delete;  //! Disable assignment operator");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("private:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_prefix;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rad::DbAdapter& m_runtime_db;");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}  // namespace ");
    String _lowerCase_1 = moduleName.toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#endif  // ");
    String _upperCase_4 = moduleName.toUpperCase();
    _builder.append(_upperCase_4);
    _builder.append("_");
    String _upperCase_5 = className.toUpperCase();
    _builder.append(_upperCase_5);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * dbInterface.cpp
   */
  public CharSequence generateSource(final String moduleName, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @ingroup ");
    _builder.append(moduleName, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @copyright ESO - European Southern Observatory");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @brief ");
    _builder.append(className, " ");
    _builder.append(" source file.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/dbInterface.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/config.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/logger.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <rad/assert.hpp>");
    _builder.newLine();
    _builder.append("#include <rad/exceptions.hpp>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace ");
    String _lowerCase = moduleName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("DbInterface::DbInterface(const std::string& prefix, rad::DbAdapter& runtime_db)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(": m_prefix(prefix),");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("m_runtime_db(runtime_db) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (prefix.size() > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("m_prefix = prefix + \".\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("DbInterface::~DbInterface() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("std::string DbInterface::GetControlState() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_runtime_db.Get(m_prefix + KEY_CONTROL_STATE);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("std::string DbInterface::Get(const std::string& key) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_runtime_db.Get(m_prefix + key);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void DbInterface::SetControlState(const std::string& value) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_runtime_db.Set(m_prefix + KEY_CONTROL_STATE, value);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void DbInterface::SetConfig(Config& cfg) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// @TODO avoid copying strings");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::vector < std::string > kvs;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(m_prefix + KEY_CONFIG_REQ_ENDPOINT);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(cfg.GetMsgReplierEndpoint());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(m_prefix + KEY_CONFIG_DB_ENDPOINT);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(cfg.GetDbEndpoint());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(m_prefix + KEY_CONFIG_DB_TIMEOUT_SEC);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(std::to_string(cfg.GetDbTimeout().tv_sec));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(m_prefix + KEY_CONFIG_SM_SCXML);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(cfg.GetSmScxmlFilename());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(m_prefix + KEY_CONFIG_FILENAME);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(cfg.GetConfigFilename());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(m_prefix + KEY_CONFIG_LOG_LEVEL);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(cfg.GetLogLevel());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(m_prefix + KEY_CONFIG_LOG_PROPERTIES);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("kvs.push_back(cfg.GetLogProperties());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_runtime_db.MultiSet(kvs);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void DbInterface::Set(const std::string& key, const std::string& value) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_runtime_db.Set(m_prefix + key, value);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}  // namespace ");
    String _lowerCase_1 = moduleName.toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
