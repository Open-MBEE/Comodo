package comodo2.templates.elt.cpp;

import com.google.common.collect.Iterables;
import comodo2.engine.Config;
import comodo2.queries.QClass;
import comodo2.utils.FilesHelper;
import javax.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

@SuppressWarnings("all")
public class RadConfig implements IGenerator {
  @Inject
  @Extension
  private QClass _qClass;
  
  @Inject
  @Extension
  private FilesHelper _filesHelper;
  
  /**
   * Transform UML State Machine associated to a class (classifier behavior)
   * into a RAD ActionMgr class.
   */
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess fsa) {
    Iterable<org.eclipse.uml2.uml.Class> _filter = Iterables.<org.eclipse.uml2.uml.Class>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), org.eclipse.uml2.uml.Class.class);
    for (final org.eclipse.uml2.uml.Class e : _filter) {
      boolean _isToBeGenerated = this._qClass.isToBeGenerated(e);
      if (_isToBeGenerated) {
        this._filesHelper.makeBackup(this._filesHelper.toAbsolutePath(this._filesHelper.toHppFilePath("config")));
        fsa.generateFile(this._filesHelper.toHppFilePath("config"), this.generateHeader(Config.getInstance().getCurrentModule(), "Config"));
        this._filesHelper.makeBackup(this._filesHelper.toAbsolutePath(this._filesHelper.toCppFilePath("config")));
        fsa.generateFile(this._filesHelper.toCppFilePath("config"), this.generateSource(Config.getInstance().getCurrentModule(), "Config"));
      }
    }
  }
  
  /**
   * config.hpp
   */
  public CharSequence generateHeader(final String moduleName, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @ingroup ");
    _builder.append(moduleName, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @copyright ESO - European Southern Observatory");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @brief ");
    _builder.append(className, " ");
    _builder.append(" header file.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("#ifndef ");
    String _upperCase = moduleName.toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_");
    String _upperCase_1 = className.toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_2 = moduleName.toUpperCase();
    _builder.append(_upperCase_2);
    _builder.append("_");
    String _upperCase_3 = className.toUpperCase();
    _builder.append(_upperCase_3);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <yaml-cpp/yaml.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <string>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace ");
    String _lowerCase = moduleName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Default application configuration values.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const std::string CONFIG_DEFAULT_PROCNAME       = \"");
    _builder.append(moduleName);
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("//! no default value to force user to specify config filename since it overwrites the command line options.");
    _builder.newLine();
    _builder.append("const std::string CONFIG_DEFAULT_FILENAME       = \"\";");
    _builder.newLine();
    _builder.append("const std::string CONFIG_DEFAULT_SCXML_FILENAME = \"");
    _builder.append(moduleName);
    _builder.append("/sm.xml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("const std::string CONFIG_DEFAULT_LOGLEVEL       = \"INFO\";");
    _builder.newLine();
    _builder.append("const std::string CONFIG_DEFAULT_LOG_PROPERTIES = \"");
    _builder.append(moduleName);
    _builder.append("/log.properties\";");
    _builder.newLineIfNotEmpty();
    _builder.append("const std::string CONFIG_DEFAULT_DB_ENDPOINT    = \"127.0.0.1:6379\";");
    _builder.newLine();
    _builder.append("const int CONFIG_DEFAULT_DB_TIMEOUT_SEC         = 2;");
    _builder.newLine();
    _builder.append("const std::string CONFIG_DEFAULT_REQ_ENDPOINT   = \"zpb.rr://127.0.0.1:12081/\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Application configuration environment variables");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("const std::string CONFIG_ENVVAR_DBHOST          = \"DB_HOST\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class provide access to the command line options and");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* the configuration parameters stored in the configuration file.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Config {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Default constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Initialize application configuration attributes by");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - first use the default constant values defined in the header");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* - override the constant values with environment variables (if defined)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Config();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Default destructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("virtual ~Config();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method parses the command line parameters overriding");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* the initialization done in the constructor.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] argc Number of command line options.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] argv Pointer to the array of command line options.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return false if the help option has been invoked, true otherwise.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("bool ParseOptions(int argc, char* argv[]);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method load from a configuration file the application");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* configuration overriding the initialization done in the constructor");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* and the command line options.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param[in] filename Application configuration filename.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void LoadConfig(const std::string& filename = \"\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The network endpoint to send request to this application.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The format is \"<middleware>.<protocol>://<ipaddr>:<port>\".");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* For example: \"zpb.rr://127.0.0.1:12081/\"");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const std::string& GetMsgReplierEndpoint() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The IP address and port used to connect to the runtime DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const std::string& GetDbEndpoint() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The timeout used when communicating to the runtime DB.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const timeval GetDbTimeout() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The SCXML State Machine model filename used by the application.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const std::string& GetSmScxmlFilename() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The application configuration filename.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const std::string& GetConfigFilename() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The application process name.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const std::string& GetProcName() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The configured log level.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const std::string& GetLogLevel() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The log properties config filename.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const std::string& GetLogProperties() const;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Config(const Config&) = delete;              //! Disable copy constructor");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Config& operator=(const Config&) = delete;  //! Disable assignment operator");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("private:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("YAML::Node  m_config_node;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_proc_name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_log_level;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_log_properties;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_config_filename;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_scxml_filename;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_db_host_endpoint;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int         m_db_timeout_sec;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string m_req_endpoint;");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}  // namespace ");
    String _lowerCase_1 = moduleName.toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#endif  // ");
    String _upperCase_4 = moduleName.toUpperCase();
    _builder.append(_upperCase_4);
    _builder.append("_");
    String _upperCase_5 = className.toUpperCase();
    _builder.append(_upperCase_5);
    _builder.append("_HPP_");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * config.cpp
   */
  public CharSequence generateSource(final String moduleName, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @file");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @ingroup ");
    _builder.append(moduleName, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @copyright ESO - European Southern Observatory");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @brief ");
    _builder.append(className, " ");
    _builder.append(" source file.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/config.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/dbInterface.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    _builder.append(moduleName);
    _builder.append("/logger.hpp>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <rad/assert.hpp>");
    _builder.newLine();
    _builder.append("#include <rad/exceptions.hpp>");
    _builder.newLine();
    _builder.append("#include <rad/helper.hpp>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <boost/program_options.hpp>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace bpo = boost::program_options;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace ");
    String _lowerCase = moduleName.toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("Config::Config()");
    _builder.newLine();
    _builder.append(": m_proc_name(CONFIG_DEFAULT_PROCNAME),");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("m_log_level(CONFIG_DEFAULT_LOGLEVEL),");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("m_log_properties(CONFIG_DEFAULT_LOG_PROPERTIES),");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("m_config_filename(CONFIG_DEFAULT_FILENAME),");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("m_scxml_filename(CONFIG_DEFAULT_SCXML_FILENAME),");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("m_db_host_endpoint(CONFIG_DEFAULT_DB_ENDPOINT),");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("m_db_timeout_sec(CONFIG_DEFAULT_DB_TIMEOUT_SEC),");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("m_req_endpoint(CONFIG_DEFAULT_REQ_ENDPOINT) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @todo these msgs won\'t be displayed until the DEBUG logLevel is applied.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - Log level: <\" << m_log_level << \">\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - Log properties: <\" << m_log_properties << \">\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - Configuration filename: <\"");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<< m_config_filename << \">\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - DB host: <\" << m_db_host_endpoint");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<< \"> (timeout \" << m_db_timeout_sec << \" sec)\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - Requests endpoint: <\" << m_req_endpoint");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<< \">\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Read environment variables.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string db_addr = rad::Helper::GetEnvVar(CONFIG_ENVVAR_DBHOST);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (db_addr.size() > 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("m_db_host_endpoint = db_addr;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"EnvVar - DB host: <\" << m_db_host_endpoint << \">\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Config::~Config() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool Config::ParseOptions(int argc, char *argv[]) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Define command line options.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("bpo::options_description options_desc(\"Options\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("options_desc.add_options()(\"help,h\", \"Print help messages\")(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"proc-name,n\", bpo::value < std::string > (&m_proc_name),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"Process name\")(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"log-level,l\",");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("bpo::value < std::string > (&m_log_level),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"Log level: ERROR, WARNING, STATE, EVENT, ACTION, INFO, DEBUG, TRACE\")(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"config,c\", bpo::value < std::string > (&m_config_filename),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"Configuration filename\")(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"db-host,d\",");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("bpo::value < std::string > (&m_db_host_endpoint),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"In-memory DB host (ipaddr:port)\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Parse the options.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bpo::variables_map options_map;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bpo::store(bpo::parse_command_line(argc, argv, options_desc),");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("options_map);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (options_map.count(\"help\")) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("std::cout << options_desc << std::endl;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("* Throws on error, so do after help in case");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("* there are any problems.");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bpo::notify(options_map);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (options_map.count(\"log-level\")) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("log4cplus::LogLevelManager& log_mgr = log4cplus::getLogLevelManager();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("log4cplus::LogLevel ll = log_mgr.fromString(m_log_level);");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("if (ll != log4cplus::NOT_SET_LOG_LEVEL) {");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("GetLogger().setLogLevel(ll);");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CmdOpt - Log level: <\" << m_log_level");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<< \">\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("std::cout << options_desc << std::endl;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("throw rad::InvalidOptionException(\"Invalid log level.\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (options_map.count(\"proc-name\") == 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("m_proc_name = std::string(argv[0]);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - Process name: <\" << m_proc_name");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CmdOpt - Process name: <\" << m_proc_name");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (options_map.count(\"db-host\")) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CmdOpt - DB host: <\" << m_db_host_endpoint");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - DB host: <\" << m_db_host_endpoint");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (options_map.count(\"config\")) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CmdOpt - Configuration filename: <\"");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< m_config_filename << \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Default - Configuration filename: <\"");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< m_config_filename << \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (bpo::error& e) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("std::cerr << \"ERROR: \" << e.what() << std::endl << std::endl;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("std::cerr << options_desc << std::endl;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw rad::InvalidOptionException(e.what());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void Config::LoadConfig(const std::string& filename) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string config_filename = filename;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (config_filename == \"\") {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("config_filename = m_config_filename;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// resolve filename");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("std::string resolved_config_filename = rad::Helper::FindFile(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("config_filename);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (resolved_config_filename.size() == 0) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOG4CPLUS_ERROR(GetLogger(), \"Cannot find <\" << config_filename << \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw rad::Exception(rad::errorMsg::CFG_LOAD, resolved_config_filename);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("m_config_node = YAML::LoadFile(resolved_config_filename);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (m_config_node[KEY_CONFIG_LOG_PROPERTIES]) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("m_log_properties = m_config_node[KEY_CONFIG_LOG_PROPERTIES].as<std::string>();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CfgFile - \" << KEY_CONFIG_LOG_PROPERTIES");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<< \" = <\" << m_log_properties << \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (m_config_node[KEY_CONFIG_REQ_ENDPOINT]) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("m_req_endpoint = m_config_node[KEY_CONFIG_REQ_ENDPOINT]");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append(".as<std::string>();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CfgFile - \" << KEY_CONFIG_REQ_ENDPOINT");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< \" = <\" << m_req_endpoint << \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (m_config_node[KEY_CONFIG_DB_ENDPOINT]) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("m_db_host_endpoint = m_config_node[KEY_CONFIG_DB_ENDPOINT]");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append(".as<std::string>();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CfgFile - \" << KEY_CONFIG_DB_ENDPOINT");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< \" = <\" << m_db_host_endpoint << \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (m_config_node[KEY_CONFIG_DB_TIMEOUT_SEC]) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("m_db_timeout_sec =");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("m_config_node[KEY_CONFIG_DB_TIMEOUT_SEC].as<int>();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CfgFile - \" << KEY_CONFIG_DB_TIMEOUT_SEC");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< \" = <\" << m_db_timeout_sec << \"> sec\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (m_config_node[KEY_CONFIG_SM_SCXML]) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("m_scxml_filename = m_config_node[KEY_CONFIG_SM_SCXML]");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append(".as<std::string>();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"CfgFile - \" << KEY_CONFIG_SM_SCXML << \" = <\"");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<< m_scxml_filename << \">\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (YAML::Exception& e) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw rad::Exception(rad::errorMsg::CFG_LOAD, resolved_config_filename);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_ASSERT(m_config_node.IsNull() == false);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("m_config_filename = resolved_config_filename;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("LOG4CPLUS_DEBUG(GetLogger(), \"Loaded configuration file <\" << m_config_filename");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<< \">\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string& Config::GetMsgReplierEndpoint() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_req_endpoint;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string& Config::GetDbEndpoint() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_db_host_endpoint;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const timeval Config::GetDbTimeout() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("timeval timeout = { m_db_timeout_sec, 0 };  // default");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return timeout;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string& Config::GetSmScxmlFilename() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_scxml_filename;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string& Config::GetConfigFilename() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_config_filename;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string& Config::GetProcName() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_proc_name;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string& Config::GetLogLevel() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_log_level;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const std::string& Config::GetLogProperties() const {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RAD_TRACE(GetLogger());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return m_log_properties;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}  // namespace ");
    String _lowerCase_1 = moduleName.toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
