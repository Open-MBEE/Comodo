package comodo2.templates.qpc.impl;

import java.util.TreeSet;

import javax.inject.Inject;

import com.google.common.collect.Iterables;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.uml2.uml.StateMachine;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupFile;

import comodo2.queries.QClass;
import comodo2.queries.QStateMachine;
import comodo2.templates.qpc.Utils;
import comodo2.templates.qpc.model.FunctionCall;
import comodo2.templates.qpc.traceability.FileDescriptionHeader;
import comodo2.utils.FilesHelper;



public class QpcImplFiles implements IGenerator {


	@Inject
	private FilesHelper mFilesHelper;

	@Inject
	private QClass mQClass;

	@Inject
	private QStateMachine mQStateMachine;

	@Inject
	private Utils mUtils;

	@Inject
	private FileDescriptionHeader mFileDescHeader;


    /**
	 * Process a UML State Machine associated to a class (classifier behavior)
	 * to generate implementation files associated to a State Machine file generated by QM.
	 * 
	 * The UML Class should:
	 * - be inside a UML Package with stereotype cmdoModule
	 * - the cmdoModule name should have been provided in the configuration
	 * - have stereotype cmdoComponent
	 * - have an associated UML State Machine
	 */
	@Override
	public void doGenerate(final Resource input, final IFileSystemAccess fsa) {


		Iterable<org.eclipse.uml2.uml.Class> _filter = Iterables.<org.eclipse.uml2.uml.Class>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), org.eclipse.uml2.uml.Class.class);
		for (final org.eclipse.uml2.uml.Class e : _filter) {
			if ((mQClass.isToBeGenerated(e) && mQClass.hasStateMachines(e))) {
				for (final StateMachine sm : mQClass.getStateMachines(e)) {
					String className = e.getName();
					String smName = sm.getName();
					String smQualifiedName = className + "_" + smName;

					TreeSet<FunctionCall> functionCalls = mUtils.getAllFunctionCalls(mQStateMachine.getAllActionNames(sm));
					TreeSet<FunctionCall> guardCalls = mUtils.getAllFunctionCalls(mQStateMachine.getAllGuardNames(sm));

					fsa.generateFile(mFilesHelper.toQmImplFilePath(smQualifiedName + "_impl.c"), this.generateImplSource(smQualifiedName, className, smName, functionCalls, guardCalls));						
					fsa.generateFile(mFilesHelper.toQmImplFilePath(smQualifiedName + "_impl.h"), this.generateImplHeader(smQualifiedName, className, smName, functionCalls, guardCalls));						
				}

			}
		}


	}

	/**
	 * Generates the source file for the implementation of actions and guards in the model
	 */
	public CharSequence generateImplSource(final String smQualifiedName, final String className, final String smName, final TreeSet<FunctionCall> functionCalls, final TreeSet<FunctionCall> guardCalls){
		STGroup g = new STGroupFile("resources/qpc_tpl/QpcImplFiles.stg");
		ST st = g.getInstanceOf("StateMachineImplSource");

		String methodsCodeString = "";
		TreeSet<String> guardNamesNoParenthesis = new TreeSet<String>();


		for (FunctionCall guardCall : guardCalls) {
			methodsCodeString += printGuardFunctionCall(g, smQualifiedName, guardCall);
			guardNamesNoParenthesis.add(guardCall.getName());
		}

		for (FunctionCall functionCall : functionCalls) {
			methodsCodeString += printActionFunctionCall(g, smQualifiedName, functionCall);
		}

		st.add("fileDescriptionHeader", mFileDescHeader.generateFileDescriptionHeader(className, smName, false));
		st.add("className", className);
		st.add("smQualifiedName", smQualifiedName);
		st.add("guardNameList", guardNamesNoParenthesis);
		st.add("implementationMethodsCodeString", methodsCodeString);

		return st.render();
	}

	/**
	 * Generates the header file for the implementation of behaviors and guards in the model
	 */
	public CharSequence generateImplHeader(final String smQualifiedName, final String className, final String smName, final TreeSet<FunctionCall> actionCalls, final TreeSet<FunctionCall> guardCalls){
		STGroup g = new STGroupFile("resources/qpc_tpl/QpcImplFiles.stg");
		ST st = g.getInstanceOf("StateMachineImplHeader");
		
		TreeSet<String> guardNamesNoParenthesis = new TreeSet<String>();

		String methodsDefinition = "";
		
		for (FunctionCall guardCall : guardCalls) {
			ST st_guard_decl = g.getInstanceOf("GuardFunctionDeclaration");
			guardNamesNoParenthesis.add(guardCall.getName());
			st_guard_decl.add("smQualifiedName", smQualifiedName);
			st_guard_decl.add("guardName", guardCall.getName());
			st_guard_decl.add("argStr", guardCall.getImplementationArgsString());
			methodsDefinition += st_guard_decl.render();
		}
		
		for (FunctionCall actionCall : actionCalls) {
			ST st_action_decl = g.getInstanceOf("ActionFunctionDeclaration");
			st_action_decl.add("smQualifiedName", smQualifiedName);
			st_action_decl.add("functionName", actionCall.getName());
			st_action_decl.add("argStr", actionCall.getImplementationArgsString());
			methodsDefinition += st_action_decl.render();
		}
		
		st.add("fileDescriptionHeader", mFileDescHeader.generateFileDescriptionHeader(className, smName, false));
		st.add("smQualifiedName", smQualifiedName);
		st.add("smQualifiedNameUpperCase", smQualifiedName.toUpperCase());
		st.add("guardNameList", guardNamesNoParenthesis);
		st.add("methodsDefinition", methodsDefinition);
		
		return st.render();
	}

	public CharSequence printActionFunctionCall(final STGroup g, final String smQualifiedName, final FunctionCall functionCall){
		ST st_call = g.getInstanceOf("ActionFunction");

		st_call.add("smQualifiedName", smQualifiedName);
		st_call.add("functionName", functionCall.getName());	
		st_call.add("argStr", functionCall.getImplementationArgsString());

		return st_call.render();
	}

	public CharSequence printGuardFunctionCall(final STGroup g, final String smQualifiedName, final FunctionCall functionCall){
		ST st_call = g.getInstanceOf("GuardFunction");

		st_call.add("smQualifiedName", smQualifiedName);
		st_call.add("guardName", functionCall.getName());
		st_call.add("argStr", functionCall.getImplementationArgsString());

		return st_call.render();
	}

}
