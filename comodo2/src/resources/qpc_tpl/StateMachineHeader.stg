delimiters "%", "%"

StateMachineHeader(smQualifiedName, smQualifiedNameUpperCase, className, statesList) ::= <<

/* This code was generated by Comodo (https://github.com/Open-MBEE/Comodo) 
 * using the QPC-C Target Platform
 */

#ifndef %smQualifiedNameUpperCase%_H_
#define %smQualifiedNameUpperCase%_H_

#include <stdbool.h>
#include <qf_port.h>
#include <qassert.h>
#include <%className%_statechart_signals.h>
#include <%smQualifiedName%_states.h>
#include <%smQualifiedName%_impl.h>


/**
 * Declare the state machine struct, encapsulating the extended state variables.
 */
typedef struct %smQualifiedName% {
    QActive super;  // C-style inheritance
    QActive *active;  // containing machine if this is a submachine instance
    char objName[128];
    %smQualifiedName%_impl *impl;
    enum %smQualifiedName%_state myState;
} %smQualifiedName%;


/** 
 * %smQualifiedName% Constructor
 *
 * This State machine constructor is responsible for initializing
 * the object, allocating and initializing any orthogonal regions, 
 * and initializing the timers.
 */
%smQualifiedName% *%smQualifiedName%_constructor (%smQualifiedName% *me, const char *objNameNew, %smQualifiedName%_impl *implObj, QActive *active);

/**
  * Returns the instance of the Implementation class for this QActive.
  */
%smQualifiedName%_impl *%smQualifiedName%_get_impl (%smQualifiedName% *me);

/**
 * Returns the unique enum representing the current state of this machine.
 */
%smQualifiedName%_state %smQualifiedName%_get_current_state (%smQualifiedName% *me);

/**
 * Method to initialize state machine (equivalent to initial pseudostate)
 */
QState %smQualifiedName%_initial (%smQualifiedName% *me, QEvt const *e);

/**
 * State methods
 */
%statesList :{ state | QState %smQualifiedName%_%state.name%(%smQualifiedName% *me, QEvt const *e); %\n%}%

#endif /* %smQualifiedNameUpperCase%_H_ */

>>


