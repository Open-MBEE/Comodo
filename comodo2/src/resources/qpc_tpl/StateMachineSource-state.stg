delimiters "%", "%"

StateMachine_InitialState(smQualifiedName, returnStatement) ::= <<

/**
 * initial state definition
 */
QState %smQualifiedName%_initial (%smQualifiedName% *me, QEvt const *e) {
    _INITIAL_STATE_PLACEHOLDER_FOR_SIGNAL_SUBSCRIPTION_

    return %returnStatement%;
}

>>


StateMachine_State(stateQualifiedName, smQualifiedName, stateName, signalSwitchCase, superState, logging) ::= <<

/**
 * %stateName% state definition
 */
QState %stateQualifiedName% (%smQualifiedName% *me, QEvt const *e) {
%if(logging)%
    char stateName[128];
    strncpy(stateName, me->objName, 128);
    strncat(stateName, " %stateName%", 128-strlen(stateName)-1/*null-char*/);

    char logMsg[256];
    strncpy(logMsg, stateName, 256);  // strncat below null-terminates
%endif%
    switch (e->sig) {
        %signalSwitchCase%
    }
    return Q_SUPER(&%superState%);
}

>>


StateMachine_SwitchStatement(triggerEventName, action, returnStatement, onEntryStateEnum, historyList, stateQualifiedName, timerDuration, disarmTimeEvent, stateName, logging) ::= <<
case %triggerEventName%:
%if(onEntryStateEnum)%
    me->myState = %onEntryStateEnum%;
%endif%
%if(historyList)%
    %historyList :{ history | me->%history.name% = (QStateHandler)&%stateQualifiedName%;%\n%}%
%endif%
%if(timerDuration)%
    QTimeEvt_postIn(&(me->%stateName%RelativeTimer), me->active, %timerDuration%);
%endif%
%if(disarmTimeEvent)%
    QTimeEvt_disarm(&(me->%stateName%RelativeTimer));
%endif%
%if(logging)%
    strncat(logMsg, " %triggerEventName%", 256-strlen(logMsg)-1/*null-char*/);
    LogEvent_log(logMsg);
%endif%
    %action%
    return %returnStatement%;


>>

StateMachine_IfStatement(guard, action, returnStatement, isElseStatement, logging) ::= <<
%if(isElseStatement)%
else {
    %action%
%if(returnStatement)%
    return %returnStatement%;
%endif%
}
%elseif(guard)%
if (%guard%){
    %action%
%if(returnStatement)%
    return %returnStatement%;
%endif%
}
%else%
%action%
%if(returnStatement)%
    return %returnStatement%;
%endif%
%endif%
>>


FinalTransitionAction(smQualifiedNameUpperCase, completionSig) ::= <<

me->%smQualifiedNameUpperCase%_COMPLETION_EVENT_.completion_evt.super.sig = %completionSig%;
me->%smQualifiedNameUpperCase%_COMPLETION_EVENT_.completion_evt.substate = null;  // Comodo functionality not implemented
QF_publish_(&(me->%smQualifiedNameUpperCase%_COMPLETION_EVENT_.base_evt));
>>