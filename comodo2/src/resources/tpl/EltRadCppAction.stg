delimiters "%", "%"

ActionHeader(moduleName, moduleNameUpperCase, moduleNameLowerCase, className, classNameUpperCase, actionMethodsDeclaration, guardMethodsDeclaration) ::= <<
/**
 * @file
 * @ingroup %moduleName%
 * @copyright ESO - European Southern Observatory
 * @author
 *
 * @brief %className% class header file.
 */
#ifndef %moduleNameUpperCase%_%classNameUpperCase%_HPP_
#define %moduleNameUpperCase%_%classNameUpperCase%_HPP_

#include <rad/actionGroup.hpp>
#include <rad/smAdapter.hpp>

#include <string>

namespace %moduleNameLowerCase% {

class DataContext;

/**
 * This class implements the action methods related
 * to %className%.
 */
class %className% : public rad::ActionGroup {
   public:
    /**
     * Constructor.
     *
     * @param[in] ios Reference to the event loop.
     * @param[in] sm State Machine facade.
     * @param[in] data Data shared within the application among actions and activities.
     */
    %className%(boost::asio::io_service& ios, rad::SMAdapter& sm, DataContext& data);
    %actionMethodsDeclaration%
    %guardMethodsDeclaration%
	
    %className%(const %className%&) = delete;             //! Disable copy constructor
    %className%& operator=(const %className%&) = delete;  //! Disable assignment operator

   private:
    boost::asio::io_service& m_io_service;
    rad::SMAdapter& m_sm;
    DataContext& m_data;
};

}  // namespace %moduleNameLowerCase%

#endif  // %moduleNameUpperCase%_%classNameUpperCase%_HPP_

>>
                                                                           
ActionSource(moduleName, moduleNameLowerCase, className, classFileName, actionMethodsImpl, guardMethodsImpl) ::= <<
/**
 * @file
 * @ingroup %moduleName%
 * @copyright ESO - European Southern Observatory
 * @author
 *
 * @brief %className% class source file.
 */

#include <%moduleName%/%classFileName%.hpp>
#include <%moduleName%/dataContext.hpp>
#include <%moduleName%/logger.hpp>

namespace %moduleNameLowerCase% {

%className%::%className%(boost::asio::io_service& ios, rad::SMAdapter& sm, DataContext& data)
    : rad::ActionGroup("%className%"),
      m_io_service(ios),
      m_sm(sm),
      m_data(data) {
    RAD_TRACE(GetLogger());
}
%actionMethodsImpl%
%guardMethodsImpl%

}  // namespace %moduleNameLowerCase%

>>
